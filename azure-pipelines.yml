# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:
  - job: Linux

    pool:
      vmImage: 'Ubuntu 16.04'

    steps:
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        # echo '##vso[task.setvariable variable=RUSTFLAGS;]-C link-dead-code'

    - template: ci/steps.yml

    ## This + RUSTFLAGS enables code coverage testing, but it does not properly generate reports on VSTS yet it seems
    # - script: |
    #     sudo apt-get install -y cmake g++ pkg-config jq
    #     sudo apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev binutils-dev libiberty-dev
    #     cargo install cargo-kcov
    #     cargo kcov --print-install-kcov-sh | sh
    #     cargo kcov --all --no-clean-rebuild --verbose
    #     find target/cov
    #     echo '##vso[codecoverage.publish codecoveragetool=cobertura;summaryfile=$(System.DefaultWorkingDirectory)/target/cov/kcov-merged/cobertura.xml;]'

  - job: macOS
    pool:
      vmImage: xcode9-macos10.13

    steps:
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install Rust

    - template: ci/steps.yml

  - job: Windows
    pool:
      vmImage: vs2017-win2017

    steps:
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: Install Rust

    - template: ci/steps.yml
